"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toAssertionResult = exports.handleAssertions = exports.Assertion = void 0;
const assignable_1 = require("./assignable");
const deprecated_1 = require("./deprecated");
const identical_1 = require("./identical");
var Assertion;
(function (Assertion) {
    Assertion["EXPECT_TYPE"] = "expectType";
    Assertion["EXPECT_NOT_TYPE"] = "expectNotType";
    Assertion["EXPECT_ERROR"] = "expectError";
    Assertion["EXPECT_ASSIGNABLE"] = "expectAssignable";
    Assertion["EXPECT_NOT_ASSIGNABLE"] = "expectNotAssignable";
    Assertion["EXPECT_DEPRECATED"] = "expectDeprecated";
    Assertion["EXPECT_NOT_DEPRECATED"] = "expectNotDeprecated";
})(Assertion = exports.Assertion || (exports.Assertion = {}));
const assertionHandlers = new Map([
    [Assertion.EXPECT_TYPE, identical_1.expectType],
    [Assertion.EXPECT_NOT_TYPE, identical_1.expectNotType],
    [Assertion.EXPECT_ASSIGNABLE, assignable_1.expectAssignable],
    [Assertion.EXPECT_NOT_ASSIGNABLE, assignable_1.expectNotAssignable],
    [Assertion.EXPECT_DEPRECATED, deprecated_1.expectDeprecated],
    [Assertion.EXPECT_NOT_DEPRECATED, deprecated_1.expectNotDeprecated],
]);
function handleAssertions(typeChecker, assertions) {
    const tsdResults = [];
    for (const [assertion, nodes] of assertions) {
        const handler = assertionHandlers.get(assertion);
        if (!handler) {
            continue;
        }
        tsdResults.push(...handler(typeChecker, nodes));
    }
    return tsdResults;
}
exports.handleAssertions = handleAssertions;
function toAssertionResult(node, messageText) {
    return {
        messageText,
        file: node.getSourceFile(),
        start: node.getStart(),
    };
}
exports.toAssertionResult = toAssertionResult;

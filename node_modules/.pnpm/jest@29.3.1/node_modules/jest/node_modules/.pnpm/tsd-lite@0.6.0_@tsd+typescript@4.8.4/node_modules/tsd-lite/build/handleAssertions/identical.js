"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectNotType = exports.expectType = void 0;
const _1 = require("./");
function expectType(checker, nodes) {
    const tsdResults = [];
    if (!nodes) {
        return tsdResults;
    }
    for (const node of nodes) {
        if (!node.typeArguments) {
            continue;
        }
        const expectedType = checker.getTypeFromTypeNode(node.typeArguments[0]);
        const argumentType = checker.getTypeAtLocation(node.arguments[0]);
        if (!checker.isTypeAssignableTo(argumentType, expectedType)) {
            tsdResults.push((0, _1.toAssertionResult)(node, `Argument of type '${checker.typeToString(argumentType)}' is not assignable to parameter of type '${checker.typeToString(expectedType)}'.`));
            continue;
        }
        if (!checker.isTypeAssignableTo(expectedType, argumentType)) {
            tsdResults.push((0, _1.toAssertionResult)(node, `Parameter type '${checker.typeToString(expectedType)}' is declared too wide for argument type '${checker.typeToString(argumentType)}'.`));
        }
        else if (!checker.isTypeIdenticalTo(expectedType, argumentType)) {
            tsdResults.push((0, _1.toAssertionResult)(node, `Parameter type '${checker.typeToString(expectedType)}' is not identical to argument type '${checker.typeToString(argumentType)}'.`));
        }
    }
    return tsdResults;
}
exports.expectType = expectType;
function expectNotType(checker, nodes) {
    const tsdResults = [];
    if (!nodes) {
        return tsdResults;
    }
    for (const node of nodes) {
        if (!node.typeArguments) {
            continue;
        }
        const expectedType = checker.getTypeFromTypeNode(node.typeArguments[0]);
        const argumentType = checker.getTypeAtLocation(node.arguments[0]);
        if (checker.isTypeIdenticalTo(expectedType, argumentType)) {
            tsdResults.push((0, _1.toAssertionResult)(node, `Parameter type '${checker.typeToString(expectedType)}' is identical to argument type '${checker.typeToString(argumentType)}'.`));
        }
    }
    return tsdResults;
}
exports.expectNotType = expectNotType;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectNotDeprecated = exports.expectDeprecated = exports.resolveJSDocTags = exports.expressionToString = void 0;
const ts = require("@tsd/typescript");
const _1 = require("./");
function expressionToString(checker, expression) {
    if (ts.isCallLikeExpression(expression)) {
        const signature = checker.getResolvedSignature(expression);
        if (!signature) {
            return;
        }
        return checker.signatureToString(signature);
    }
    const symbol = checker.getSymbolAtLocation(expression);
    if (!symbol) {
        return;
    }
    return checker.symbolToString(symbol, expression);
}
exports.expressionToString = expressionToString;
function resolveJSDocTags(checker, expression) {
    const ref = ts.isCallLikeExpression(expression)
        ? checker.getResolvedSignature(expression)
        : checker.getSymbolAtLocation(expression);
    if (!ref) {
        return;
    }
    return new Map(ref.getJsDocTags().map((tag) => [tag.name, tag]));
}
exports.resolveJSDocTags = resolveJSDocTags;
function expectDeprecatedHelper(options) {
    return (checker, nodes) => {
        const tsdResults = [];
        if (!nodes) {
            return tsdResults;
        }
        for (const node of nodes) {
            const argument = node.arguments[0];
            const tags = resolveJSDocTags(checker, argument);
            if (!tags || !options.filter(tags)) {
                continue;
            }
            const message = expressionToString(checker, argument);
            tsdResults.push((0, _1.toAssertionResult)(node, options.message(message !== null && message !== void 0 ? message : "?")));
        }
        return tsdResults;
    };
}
exports.expectDeprecated = expectDeprecatedHelper({
    filter: (tags) => !tags.has("deprecated"),
    message: (signature) => `Expected '${signature}' to be marked deprecated`,
});
exports.expectNotDeprecated = expectDeprecatedHelper({
    filter: (tags) => tags.has("deprecated"),
    message: (signature) => `Expected '${signature}' to not be marked deprecated`,
});

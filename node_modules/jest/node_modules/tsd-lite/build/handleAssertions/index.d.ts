import type * as ts from "@tsd/typescript";
import type { AssertionResult } from "../types";
export declare enum Assertion {
    EXPECT_TYPE = "expectType",
    EXPECT_NOT_TYPE = "expectNotType",
    EXPECT_ERROR = "expectError",
    EXPECT_ASSIGNABLE = "expectAssignable",
    EXPECT_NOT_ASSIGNABLE = "expectNotAssignable",
    EXPECT_DEPRECATED = "expectDeprecated",
    EXPECT_NOT_DEPRECATED = "expectNotDeprecated"
}
export declare type Handler = (typeChecker: ts.TypeChecker, nodes: Set<ts.CallExpression>) => Array<AssertionResult>;
export declare function handleAssertions(typeChecker: ts.TypeChecker, assertions: Map<Assertion, Set<ts.CallExpression>>): Array<AssertionResult>;
export declare function toAssertionResult(node: ts.Node, messageText: string | ts.DiagnosticMessageChain): AssertionResult;
